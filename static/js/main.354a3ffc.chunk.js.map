{"version":3,"sources":["logo.svg","Components/Header.js","Components/Intro.js","Components/Submitted.js","Components/Search.js","Components/Banner.js","placeholder.png","Components/Loading.js","Components/MovieInfo.js","Components/MovieCard.js","Components/animateUnmount.js","Components/Nominations.js","Components/Results.js","Components/SearchAlert.js","Components/MovieLists.js","Components/Footer.js","Components/App.js","index.js"],"names":["Header","className","src","Logo","alt","href","Intro","Submitted","props","Search","onSubmit","handleSubmit","name","id","placeholder","value","searchTerm","onChange","handleChange","type","style","fontSize","Banner","onClick","submit","Loading","MovieInfo","state","isLoading","movie","shouldClose","bind","event","activeItem","document","querySelector","closeButton","getElementById","contains","target","this","showInfo","addEventListener","url","URL","params","i","imdbID","y","Year","r","apikey","key","searchParams","set","fetch","then","response","ok","Error","json","setState","removeEventListener","Title","Poster","Director","Runtime","Genre","Language","Country","Actors","Plot","match","Placeholder","React","Component","MovieCard","viewingInfo","classList","add","setTimeout","category","nominate","disabled","disableNominate","remove","animateUnmount","AnimatedBanner","WrappedComponent","shouldRender","isMounted","prevProps","el","Nominations","isOpen","open","prevState","nominatedList","localStorage","setItem","JSON","stringify","removeItem","listLength","length","map","isNominated","getMovieInfo","Results","resultsPage","showToTop","showMore","watchScroll","search","searchBar","getBoundingClientRect","top","window","screen","height","totalResults","searchResults","indexOf","SearchAlert","searchAlert","MovieLists","localItems","ind","newNominated","splice","toLowerCase","preventDefault","page","isSubmitted","s","Response","prevResults","newResults","Footer","rel","App","clear","item","getItem","parse","checkStorage","ReactDOM","render"],"mappings":"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","file":"static/js/main.354a3ffc.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.16794c45.svg\";","import React from \"react\";\r\nimport Logo from \"../logo.svg\";\r\n\r\nfunction Header() {\r\n    return (\r\n        <header className=\"grid-container\">\r\n            <div className=\"heading\">\r\n                <img className=\"logo\" src={Logo} alt=\"The Shoppies Movie Awards logo\" />\r\n                <h1>The Shoppies</h1>\r\n            </div>\r\n            <span className=\"subheading\">First movie award that recognizes the entrepreneurial spirit</span>\r\n            <div className=\"button-container\">\r\n                <a href=\"#search\">\r\n                    <button className=\"header-button\">\r\n                        Nominate directors\r\n                    </button>\r\n                </a>\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header;","function Intro() {\r\n    return (\r\n        <section className=\"intro grid-container\">\r\n            <h2>Recognizing film entrepreneurs</h2>\r\n            <article>\r\n                <p>There is one thing that Shopify store owners and movie directors have in common: they are all entrepreneurs. Both are driven by their vision; both make a thousand crucial decisions every day, both overcome obstacles to bring their dreams to life.</p>\r\n                <p>In today’s world, when movie theatres remain closed around the world, we would like to honour our favourite movie directors in a new way — by awarding them with The Shoppies, the first movie award based on the votes of eCommerce entrepreneurs.</p>\r\n            </article>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default Intro;","function Submitted(props) {\r\n    return (\r\n        <section className=\"submitted grid-container\">\r\n            <h2>Thank you!</h2>\r\n            <article>\r\n                <p>Your Shoppies nominations have been submitted.</p>\r\n                <p>The winners will be announced no later than February 12, 2021.</p>\r\n                <p>Stay tuned!</p>\r\n            </article>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default Submitted;","import React from \"react\";\r\n\r\nfunction Search(props) {\r\n    return (\r\n        <section className=\"search\">                \r\n            <form \r\n                className=\"search-bar box\"\r\n                onSubmit={props.handleSubmit}\r\n            >\r\n                <label>\r\n                    We invite you to acknowledge your favourite directors by nominating their movies in the search results below.\r\n                    <br/>\r\n                    Please select 5 movies.\r\n                </label>\r\n                <fieldset>\r\n                    <input\r\n                        name=\"search-text\"\r\n                        id=\"search-text-field\"\r\n                        placeholder=\"Search for the movie to nominate\"\r\n                        value={props.searchTerm}\r\n                        onChange={props.handleChange}\r\n                        type=\"search\"\r\n                        style={{ fontSize: \"1em\" }}\r\n                    />\r\n                    <button \r\n                        className=\"search-button\"\r\n                        value=\"Submit\"\r\n                    >\r\n                        <span className=\"fas fa-search\"></span>\r\n                    </button>\r\n                </fieldset>\r\n            </form>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default Search;","function Banner(props) {\r\n    return (\r\n        <section className=\"banner box\">\r\n            <p>You have reached the maximum amount of nominations. Ready to submit?</p>\r\n            <button onClick={props.submit}>Submit</button>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default Banner;","export default __webpack_public_path__ + \"static/media/placeholder.88f89971.png\";","function Loading(props) {\r\n    return (\r\n        <div className=\"spinner-container\">\r\n            <div className=\"spinner-background\">\r\n                <div className=\"spinner\"></div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Loading;","import React from \"react\";\r\nimport Placeholder from \"../placeholder.png\";\r\nimport Loading from \"./Loading\";\r\n\r\nclass MovieInfo extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isLoading: true,\r\n            movie: {}\r\n        }\r\n        this.shouldClose = this.shouldClose.bind(this);\r\n    }\r\n\r\n    // Listen for clicks on the close button or outside of the card to close it:\r\n    shouldClose(event) {\r\n        const activeItem = document.querySelector(\".movie-info\"),\r\n            closeButton = document.getElementById(\"close-button\");\r\n\r\n        if (!activeItem.contains(event.target) || closeButton.contains(event.target)) {\r\n            this.props.showInfo();\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.getElementById(\"root\").addEventListener(\"click\", this.shouldClose, false);\r\n\r\n        // Fetch movie details from the API:\r\n        let url = new URL(\"http://www.omdbapi.com/\"),\r\n            params = {\r\n                i: this.props.imdbID,\r\n                y: this.props.Year,\r\n                type: \"movie\",\r\n                r: \"json\",\r\n                apikey: \"b56cbf95\",\r\n            }\r\n            \r\n        for (let key in params) {\r\n            url.searchParams.set(key, params[key]);\r\n        }\r\n\r\n        fetch(url)\r\n        .then(response => {\r\n            if (!response.ok) {\r\n                throw new Error(\"Can't find movie info\");\r\n            }\r\n            return response.json();\r\n        })\r\n        .then(response => \r\n            this.setState({\r\n                isLoading: false,\r\n                movie: response\r\n            })\r\n        );\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        document.getElementById(\"root\").removeEventListener(\"click\", this.shouldClose);\r\n    }\r\n\r\n    render() {\r\n        const { Title, Year, Poster, Director, Runtime, Genre, Language, Country, Actors, Plot} = this.state.movie\r\n\r\n        return (\r\n            <div className=\"movie-info box\">\r\n\r\n                <button \r\n                    className=\"close-button\"\r\n                    id=\"close-button\"\r\n                    onClick={this.shouldClose}\r\n                >\r\n                    <span className=\"fas fa-times\"></span>\r\n                </button>\r\n\r\n                {this.state.isLoading ?\r\n                    <Loading /> :\r\n                    <div className=\"movie-details\">\r\n                        <img \r\n                            src={Poster.match(/^http|^www/) ? Poster : Placeholder}\r\n                            alt={`${Title} movie poster`} \r\n                        />\r\n                        <h4>{`${Title} (${Year})`}</h4>\r\n                        <span>{`by ${Director}`}</span>\r\n                        <dl>\r\n                            <p><dt>Runtime: </dt><dd>{Runtime}</dd></p>\r\n                            <p><dt>Genre: </dt><dd>{Genre}</dd></p>\r\n                            <p><dt>Language: </dt><dd>{Language}</dd></p>\r\n                            <p><dt>Country: </dt><dd>{Country}</dd></p>\r\n                            <p><dt>Director: </dt><dd>{Director}</dd></p>\r\n                            <p><dt>Cast: </dt><dd>{Actors}</dd></p>\r\n                            <p><dt>Plot: </dt><dd>{Plot}</dd></p>\r\n                        </dl>\r\n                    </div>\r\n                }\r\n            </div>    \r\n        )\r\n    }\r\n}\r\n\r\nexport default MovieInfo;","import React from \"react\";\r\nimport Placeholder from \"../placeholder.png\";\r\nimport MovieInfo from \"./MovieInfo\";\r\n\r\nclass MovieCard extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            viewingInfo: false\r\n        }\r\n        this.showInfo = this.showInfo.bind(this);\r\n    }\r\n\r\n    // Open/close the movie info card\r\n    showInfo() {\r\n        if (this.state.viewingInfo) {\r\n            \r\n            // If the card is closing, trigger the animation:\r\n            let closedInfo = document.querySelector(\".movie-info\");\r\n            closedInfo.classList.add(\"disappear\");\r\n\r\n            setTimeout(() => \r\n                this.setState({ viewingInfo: false })\r\n            , 300);\r\n\r\n        } else {\r\n            // Show the card:\r\n            this.setState({ viewingInfo: true });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { imdbID, Title, Year, Poster } = this.props.movie;\r\n\r\n        return (\r\n            <li>\r\n                <article \r\n                    className={`movie-card movie-card-${this.props.category} box`}\r\n                    id={imdbID}\r\n                >\r\n                    <div>\r\n                        <img \r\n                            src={Poster.match(/^http|^www/) ? Poster : Placeholder}\r\n                            alt={`${Title} movie poster`}\r\n                        />\r\n                        <h4 className=\"movie-title\">{Title} ({Year})</h4>\r\n                    </div>\r\n    \r\n                    <div className=\"movie-card-buttons\">\r\n                        <button \r\n                            className=\"info-button\"\r\n                            onClick={this.showInfo}\r\n                            >\r\n                            i\r\n                        </button>\r\n\r\n                        {this.props.category === \"search\" &&\r\n                            <button \r\n                            className=\"nominate-button\"\r\n                            value={this.props.movie}\r\n                            onClick={() => this.props.nominate(this.props.movie)}\r\n                            disabled={this.props.disableNominate}\r\n                            >\r\n                                Nominate\r\n                            </button>\r\n                        }\r\n                        {this.props.category === \"nominations\" &&\r\n                            <button \r\n                            className=\"remove-button\"\r\n                            value={this.props.movie}\r\n                            onClick={() => this.props.remove(this.props.movie)}\r\n                            >\r\n                                <span className=\"fas fa-times\"></span>\r\n                            </button>\r\n                        }\r\n                    </div>\r\n                </article>\r\n\r\n                {this.state.viewingInfo &&\r\n                    <MovieInfo \r\n                        imdbID={imdbID}\r\n                        Year={Year}\r\n                        showInfo={this.showInfo}\r\n                    />\r\n                }\r\n            </li>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MovieCard;","import React from \"react\";\r\n\r\nfunction animateUnmount(WrappedComponent) {\r\n\r\n    return class extends React.Component {\r\n        state = {\r\n            shouldRender: this.props.isMounted\r\n        }\r\n    \r\n        componentDidUpdate(prevProps) {\r\n\r\n            if (prevProps.isMounted && !this.props.isMounted && this.props.el) {\r\n                setTimeout(() => this.setState({ shouldRender: false }), 300);\r\n                \r\n                // Apply corresponding animation before the component unmounts\r\n                this.props.el.classList.contains(\"banner\") ? \r\n                    this.props.el.classList.add(\"unpop\") :\r\n                    this.props.el.classList.add(\"disappear\");\r\n                \r\n            } else if (!prevProps.isMounted && this.props.isMounted) {\r\n                this.setState({ shouldRender: true });\r\n            }\r\n        }\r\n    \r\n        render() {\r\n            return (\r\n                this.state.shouldRender ? \r\n                    <WrappedComponent {...this.props} /> : \r\n                    null\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nexport default animateUnmount;","import React from \"react\";\r\nimport Banner from \"./Banner\";\r\nimport MovieCard from \"./MovieCard\";\r\nimport animateUnmount from \"./animateUnmount\";\r\n\r\nconst AnimatedBanner = animateUnmount(Banner);\r\n\r\nclass Nominations extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isOpen: false\r\n        }\r\n        this.open = this.open.bind(this);\r\n    }\r\n\r\n    open() {\r\n        this.setState(prevState => {\r\n            return { isOpen: !prevState.isOpen }\r\n        });\r\n    }\r\n\r\n    componentDidUpdate() {\r\n\r\n        // Update items in the local storage based on new props\r\n        // (could be optimized with memoization?):\r\n        for (let i = 0; i < 5; i++) {\r\n            if (this.props.nominatedList[i]) {\r\n                localStorage.setItem(\r\n                    `movie-${i + 1}`,\r\n                    JSON.stringify(this.props.nominatedList[i])\r\n                )\r\n            } else {\r\n                localStorage.removeItem(`movie-${i + 1}`);\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        const listLength = this.props.nominatedList.length;\r\n\r\n        return (\r\n            <section className={`nominations ${this.state.isOpen ? \"nominations-active\" : \"\"} box`}>\r\n                <div className=\"nominations-heading\">\r\n                    <h3>Your nominations: <span className=\"nominations-count\">{listLength}</span></h3>\r\n                    <button \r\n                        className=\"dropdown-button\"\r\n                        onClick={this.open}\r\n                    >\r\n                        <span className={this.state.isOpen ? \"fas fa-angle-up\" : \"fas fa-angle-down\"}></span>\r\n                    </button>\r\n                </div>\r\n    \r\n                <AnimatedBanner \r\n                    isMounted={listLength === 5}\r\n                    el={document.querySelector(\".banner\")}\r\n                    submit={this.props.submit}\r\n                />\r\n    \r\n                {listLength === 0 ?\r\n                    <p className=\"nominations-placeholder\">No movies nominated yet</p> :\r\n    \r\n                    <ul className=\"nominated-list\">\r\n                        {this.props.nominatedList.map(movie => {\r\n                            return (\r\n                                <MovieCard\r\n                                    key={movie.imdbID}\r\n                                    movie={movie}\r\n                                    category=\"nominations\"\r\n                                    isNominated={true}\r\n                                    remove={this.props.remove}\r\n                                    getMovieInfo={this.props.getMovieInfo}\r\n                                />\r\n                            )\r\n                        })}\r\n                    </ul>\r\n                }\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Nominations;","import React from \"react\";\r\nimport MovieCard from \"./MovieCard\";\r\n\r\nclass Results extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            resultsPage: 1,\r\n            showToTop: false\r\n        }\r\n        this.showMore = this.showMore.bind(this);\r\n        this.watchScroll = this.watchScroll.bind(this);\r\n    }\r\n\r\n    // Send a search request for the next page of search results:\r\n    showMore() {\r\n\r\n        this.setState(prevState => {\r\n            return { resultsPage: prevState.resultsPage + 1 }\r\n        }, () => this.props.search(this.props.searchTerm, this.state.resultsPage, false))\r\n    }\r\n\r\n    // Show the back-to-top button when the search results are scrolled past a certain point:\r\n    watchScroll() {\r\n\r\n        let searchBar = document.getElementById(\"search-text-field\");\r\n\r\n        if (searchBar.getBoundingClientRect().top < - window.screen.height &&\r\n            this.state.showToTop === false) {\r\n                this.setState({ showToTop: true });\r\n\r\n        } else if (searchBar.getBoundingClientRect().top >= - window.screen.height &&\r\n            this.state.showToTop === true) {\r\n                this.setState({ showToTop: false });\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.addEventListener(\"scroll\", this.watchScroll, false);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener(\"scroll\", this.watchScroll);\r\n    }\r\n\r\n    render() {\r\n\r\n        // Get IDs of all nominated movies\r\n        // (prevents movies from local storage from being nominated twice):\r\n        let disableNominate = this.props.nominatedList.map(movie => {\r\n            return movie.imdbID\r\n        });\r\n\r\n        return (\r\n            <div className=\"search-results box\">\r\n                <h3>{this.props.totalResults} results found for \"{this.props.searchTerm}\":</h3>\r\n                <ul>\r\n                    {this.props.searchResults.map(movie => {\r\n                        return (\r\n                            <MovieCard\r\n                                key={movie.imdbID}\r\n                                movie={movie}\r\n                                category=\"search\"\r\n                                disableNominate={disableNominate.indexOf(movie.imdbID) >= 0 || this.props.nominatedList.length === 5}\r\n                                nominate={this.props.nominate}\r\n                                getMovieInfo={this.props.getMovieInfo}\r\n                            />\r\n                        )\r\n                    })}\r\n\r\n                    {this.props.totalResults > this.state.resultsPage * 10 &&\r\n                        <button \r\n                            className=\"show-more-button\"\r\n                            onClick={this.showMore}\r\n                        >\r\n                            Show more\r\n                        </button>\r\n                    }\r\n                </ul>\r\n\r\n                {this.state.showToTop && \r\n                    <button className=\"to-top-button\">\r\n                        <a href=\"#search\">\r\n                            <span className=\"fas fa-angle-up\"></span>\r\n                        </a>\r\n                    </button>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Results;","function SearchAlert(props) {\r\n    return (\r\n        <div className=\"search-alert box\">\r\n            <span>{props.searchAlert}</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchAlert;","import React from \"react\";\r\nimport Search from \"./Search\"; \r\nimport Nominations from \"./Nominations\";\r\nimport Results from \"./Results\";\r\nimport Loading from \"./Loading\";\r\nimport SearchAlert from \"./SearchAlert\";\r\n\r\nclass MovieLists extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isLoading: false,\r\n            searchTerm: \"\",\r\n            searchResults: [],\r\n            totalResults: 0,\r\n            searchAlert: \"\",\r\n            nominatedList: []\r\n        }\r\n        this.nominate = this.nominate.bind(this);\r\n        this.remove = this.remove.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.search = this.search.bind(this);   \r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        // If there are items from local storage, use them to set nominations: \r\n        this.props.localItems &&\r\n        this.props.localItems.length > 0 &&\r\n            this.setState({ nominatedList: this.props.localItems })\r\n    }\r\n\r\n    nominate(movie) {\r\n\r\n        // Add a movie to the list of nominations:\r\n        this.setState((prevState) => {\r\n          let newNominated = [...prevState.nominatedList, movie];\r\n          return { nominatedList: newNominated }\r\n        });\r\n    }\r\n    \r\n    remove(movie) {\r\n\r\n        // Trigger the animation on the removed element:\r\n        let removedElem = document.querySelector(\".nominated-list\").querySelector(`#${movie.imdbID}`);\r\n        removedElem.classList.add(\"unpop\");\r\n\r\n        // Remove the element from the list of nominations after the animation is finished:\r\n        setTimeout(() =>     \r\n            this.setState((prevState) => {\r\n\r\n                let ind = prevState.nominatedList.indexOf(movie),\r\n                    newNominated = prevState.nominatedList;\r\n                \r\n                newNominated.splice(ind, 1);\r\n                return { nominatedList: newNominated }\r\n            })\r\n        , 300);\r\n    }\r\n    \r\n    handleChange(event) {\r\n\r\n        // Run the search function with the value from the search bar:\r\n        let { value } = event.target;\r\n        this.setState({ \r\n            isLoading: true,\r\n            searchTerm: value\r\n        }, () => \r\n            this.search(this.state.searchTerm.toLowerCase(), 1, false)\r\n        );\r\n    }\r\n\r\n    handleSubmit(event) {\r\n\r\n        // Force the search alert to show if there are no search results:\r\n        event.preventDefault();\r\n        this.search(this.state.searchTerm, 1, true);\r\n    }\r\n\r\n    search(searchTerm, page, isSubmitted) {\r\n\r\n        // Reset the search term if the input field has been emptied:\r\n        if (searchTerm === \"\") {\r\n            return this.setState({\r\n                isLoading: false,\r\n                searchResults: [],\r\n                searchAlert: \"\",\r\n                totalResults: 0\r\n            });\r\n        }\r\n\r\n        // Combine input into the url for the API request:\r\n        let url = new URL(\"http://www.omdbapi.com/\"),\r\n            params = {\r\n                s: searchTerm,\r\n                type: \"movie\",\r\n                r: \"json\",\r\n                apikey: \"b56cbf95\",\r\n                page: page\r\n            }\r\n        \r\n        for (let key in params) {\r\n            url.searchParams.set(key, params[key]);\r\n        }\r\n\r\n        // API request:\r\n        fetch(url)\r\n\r\n        // Retreive the API data or show error:\r\n        .then(response => {\r\n            if (!response.ok) { \r\n                throw new Error(\"Can't connect to the API\")\r\n            }\r\n            return response.json();\r\n        })\r\n\r\n        // If the API doesn't return any movies, assign a search alert based on the response:\r\n        .then(response => {\r\n            if (response.Response === \"False\") {\r\n\r\n                if (response.Error === \"Too many results.\") {\r\n                    return this.setState({\r\n                        isLoading: false,\r\n                        searchResults: [],\r\n                        searchAlert: isSubmitted && \"Too many results. Try to narrow your search.\",\r\n                        totalResults: 0\r\n                    });\r\n\r\n                } else if (response.Error === \"Movie not found!\") {\r\n                    return this.setState({ \r\n                        isLoading: false,\r\n                        searchResults: [],\r\n                        searchAlert: `Can't find \"${searchTerm}\". Try searching for something else.`,\r\n                        totalResults: 0\r\n                    });\r\n                } else {\r\n                    throw new Error(\"There was an error: \", response.Error)\r\n                }\r\n\r\n            // If the API returns movies:\r\n            } else {\r\n\r\n                // Since the API returns 10 results per page, \r\n                // for search pages 2 and over, add the results to the existing list:\r\n                if (page > 1) {\r\n                    let prevResults = this.state.searchResults,\r\n                        newResults = [...prevResults, ...response.Search];\r\n\r\n                    return this.setState({ \r\n                        isLoading: false,\r\n                        searchResults: newResults,\r\n                        searchAlert: \"\"\r\n                    });\r\n\r\n                // For search page 1, create new results:\r\n                } else {\r\n                    return this.setState({ \r\n                        isLoading: false,\r\n                        searchResults: response.Search,\r\n                        totalResults: response.totalResults,\r\n                        searchAlert: \"\"\r\n                    });\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <section className=\"movie-lists grid-container\" id=\"search\">\r\n                <h2>Choose your favourites</h2>\r\n                <Search \r\n                    searchTerm={this.state.searchTerm}\r\n                    handleChange={this.handleChange}\r\n                    handleSubmit={this.handleSubmit}\r\n                />\r\n\r\n                <Nominations \r\n                    nominatedList={this.state.nominatedList}\r\n                    remove={this.remove}\r\n                    submit={this.props.submit}\r\n                />\r\n\r\n                {this.state.isLoading && \r\n                    <div className=\"search-loading box\">\r\n                        <Loading />\r\n                    </div>                \r\n                }\r\n\r\n                {this.state.searchResults.length > 0 && \r\n                    <Results\r\n                        searchTerm={this.state.searchTerm}\r\n                        searchResults={this.state.searchResults}\r\n                        totalResults={this.state.totalResults}\r\n                        nominatedList={this.state.nominatedList}\r\n                        nominate={this.nominate}\r\n                        search={this.search}\r\n                    />\r\n                }\r\n\r\n                {this.state.searchAlert.length > 0 &&\r\n                    <SearchAlert searchAlert={this.state.searchAlert} />\r\n                }\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MovieLists;","import React from \"react\";\r\nimport Logo from \"../logo.svg\";\r\n\r\nfunction Footer() {\r\n    return (\r\n        <footer>\r\n            <div className=\"heading\">\r\n                <img className=\"logo\" src={Logo} alt=\"The Shoppies Movie Awards logo\" />\r\n                <span className=\"title\">The Shoppies</span>\r\n            </div>\r\n            <a href=\"https://dariatsvetkova.ca\" target=\"_blank\" rel=\"noreferrer\">\r\n                made by Daria Tsvetkova\r\n            </a>\r\n            <small>Photo by D.Shevtsova via Pexels</small>\r\n        </footer>\r\n    )\r\n}\r\n\r\nexport default Footer;","// --- APP STRUCTURE ---\n\n// App (this file) \n//    - retrieves items from local storage, if any \n//    - handles final submission of nominations\n\n// a. Greeting / renders a welcome screen\n// b. Main content\n//   1. Header\n//   2. Intro / renders a piece of text\n\n//   3. Movie Lists\n//       - handles API search requests, \n//        adding/removing nominations; \n//       - stores search results and nominations\n\n//    3.1. Search / renders a search bar\n//       - handles user input and passes it to Movie Lists\n\n//    3.2a. Loading / renders loading animation\n//    3.2b. Results / renders a list of movies\n//             - sends requests to Movie Lists for showing \n//              pages 2+ of the search results; \n//             - handles showing/hiding \"back to top\" button \n\n//     3.2b.1. Movie Card (catogory: search) / renders a card with basic movie info\n//               - handles opening/closing movie info card\n\n//      3.2b.1.1. Movie Info / renders an overlay with detailed movie info\n//                 - handles API requests for movie details\n\n//    3.2c. Search Alert / renders an alert in case a search returns no results\n\n//    3.3. Nominations / renders mobile UI components\n//     3.3.1. Banner / renders a banner when 5 nominations have been selected\n//           - sends final submission of nominations to App\n\n//     3.3.2. Movie Card (category: nominations)\n//             - (see above)\n//       3.3.1.1.Movie Info\n//               - (see above)\n\n//   4. Submitted / renders a page section to replace Movie Lists after the submission\n//   5. Footer\n\n// -------\n\nimport React from \"react\";\nimport \"./App.css\";\nimport Logo from \"../logo.svg\"; \nimport Header from \"./Header\";\nimport Intro from \"./Intro\";\nimport Submitted from \"./Submitted\";\nimport MovieLists from \"./MovieLists\"\nimport Footer from \"./Footer\";\n\n// Check if there are nominated movies saved in local storage:\nconst checkStorage = () => {\n  if (window.localStorage.length > 0) {\n\n    let localItems = [],\n        ind = 0;\n\n    for (let key in window.localStorage) {\n      if (key.match(/movie-[1-5]/)) {\n\n        let item = localStorage.getItem(key);\n\n        if (item !== \"undefined\") {\n          localItems[ind] = JSON.parse(item);\n          ind++;\n        }\n      }\n    }\n    return localItems.length > 0 && localItems;\n  }\n}\n\nclass App extends React.Component {\n\n  constructor() {\n    super();\n    this.state = {\n      isLoading: true,\n      isSubmitted: false\n    }\n    this.submit = this.submit.bind(this);\n  }\n\n  componentDidMount() {\n    // Finish the greeting animation:\n    setTimeout(() => this.setState({ isLoading: false }), 3000);\n  }\n\n  submit() {\n    // Remove the search page once the nominations are submitted;\n    // Clear local storage to make the app reusable:\n    this.setState({ isSubmitted: true });\n    localStorage.clear();\n  }\n\n  render() {\n\n    let localItems = checkStorage()\n\n    return (\n      <div className=\"app-container\">\n        {this.state.isLoading ?\n\n         <div className=\"greeting\">\n            <img className=\"logo\" src={Logo} alt=\"The Shoppies Movie Awards logo\" />\n            <div>\n              <p>Welcome to</p>\n              <p className=\"title\">The Shoppies</p>\n              <p>2021</p>\n            </div>\n          </div> :\n\n          <div className=\"app\">\n            <Header />\n            <main>\n              <Intro />\n              {this.state.isSubmitted ?\n                <Submitted /> :\n                <MovieLists \n                  localItems={localItems}\n                  submit={this.submit}/>\n              }\n            </main>\n            <Footer />\n          </div>\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);"],"sourceRoot":""}